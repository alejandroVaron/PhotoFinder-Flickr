"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
module.exports = {
    development: {
        username: "postgres",
        password: "alejo",
        database: "postgres",
        host: "localhost",
        dialect: "postgres",
        operatorsAliases: 0
    },
    production: {
        use_env_variable: 'DATABASE_URL',
        dialect: 'postgres',
        dialectOptions: {
            ssl: {
                require: true,
                rejectUnauthorized: false, // <<<<<<< YOU NEED THIS TO FIX UNHANDLED REJECTION 
            },
        },
    },
    llave: "supersecretkeyomg"
};
var Sequelize = require('sequelize').Sequelize;
var _a = require('../config/config.js'), development = _a.development, production = _a.production;
var database = 0; // 0 = Localhost database  ||  1 = Heroku database
var heroku = 0;
var sequelize;
if (!process.env.DATABASE_URL) {
    require('dotenv').config();
    heroku = 1;
}
if (database == 0) {
    sequelize = new Sequelize(development.database, development.username, development.password, {
        host: development.host,
        dialect: "postgres"
    });
}
else {
    if (heroku == 1) {
        sequelize = new Sequelize(process.env.DATABASE, process.env.USER, process.env.PASSWORD, {
            host: process.env.HOST,
            port: process.env.PORT,
            dialect: 'postgres',
            dialectOptions: {
                ssl: {
                    require: true,
                    rejectUnauthorized: false
                }
            }
        });
    }
    else {
        sequelize = new Sequelize(process.env.DATABASE_URL, {
            dialect: 'postgres',
            protocol: 'postgres',
            logging: false,
            dialectOptions: {
                ssl: {
                    require: true,
                    rejectUnauthorized: false,
                }
            }
        });
    }
}
module.exports = sequelize;
module.exports = {
    up: function (queryInterface, Sequelize) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, queryInterface.createTable('User', {
                        id_user: {
                            allowNull: false,
                            autoIncrement: true,
                            primaryKey: true,
                            type: Sequelize.INTEGER
                        },
                        user_email: {
                            type: Sequelize.STRING
                        },
                        user_password: {
                            type: Sequelize.STRING
                        },
                        createdAt: {
                            allowNull: false,
                            type: Sequelize.DATE
                        },
                        updatedAt: {
                            allowNull: false,
                            type: Sequelize.DATE
                        }
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); },
    down: function (queryInterface, Sequelize) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, queryInterface.dropTable('User')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); }
};
module.exports = {
    up: function (queryInterface, Sequelize) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, queryInterface.createTable('SearchHistory', {
                        id_searchHistory: {
                            allowNull: false,
                            autoIncrement: true,
                            primaryKey: true,
                            type: Sequelize.INTEGER
                        },
                        searchHistory_description: {
                            type: Sequelize.STRING
                        },
                        id_user: {
                            type: Sequelize.INTEGER,
                            references: {
                                model: "User",
                                key: "id_user"
                            }
                        },
                        createdAt: {
                            allowNull: false,
                            type: Sequelize.DATE
                        },
                        updatedAt: {
                            allowNull: false,
                            type: Sequelize.DATE
                        }
                    })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); },
    down: function (queryInterface, Sequelize) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, queryInterface.dropTable('SearchHistory')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); }
};
var _a = require('sequelize'), Model = _a.Model, DataTypes = _a.DataTypes;
var sequelize = require('../db/database');
var SearchHistory = /** @class */ (function (_super) {
    __extends(SearchHistory, _super);
    function SearchHistory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SearchHistory.associate = function (models) {
    };
    return SearchHistory;
}(Model));
;
SearchHistory.init({
    id_searchHistory: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: DataTypes.INTEGER
    },
    searchHistory_description: DataTypes.STRING,
    id_user: {
        type: DataTypes.INTEGER,
        references: {
            model: 'User',
            key: 'id_user'
        }
    }
}, {
    sequelize: sequelize,
    modelName: 'SearchHistory',
});
module.exports = SearchHistory;
var _a = require('sequelize'), Model = _a.Model, DataTypes = _a.DataTypes;
var sequelize = require('../db/database');
var User = /** @class */ (function (_super) {
    __extends(User, _super);
    function User() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    User.associate = function () {
    };
    return User;
}(Model));
;
User.init({
    id_user: {
        allowNull: false,
        primaryKey: true,
        autoIncrement: true,
        type: DataTypes.INTEGER
    },
    user_email: {
        type: DataTypes.STRING,
        unique: true
    },
    user_password: DataTypes.STRING
}, {
    sequelize: sequelize,
    modelName: 'User',
});
module.exports = User;
define("src/services/UserServices", ["require", "exports", "../../models/User"], function (require, exports, User_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    User_1 = __importDefault(User_1);
    var UserService = /** @class */ (function () {
        function UserService() {
        }
        UserService.getAllUsers = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, User_1.default.findAll()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            error_1 = _a.sent();
                            throw error_1;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserService.addUser = function (newUser) {
            return __awaiter(this, void 0, void 0, function () {
                var error_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, User_1.default.create(newUser)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            error_2 = _a.sent();
                            throw error_2;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserService.updateUserById = function (id, updateUser) {
            return __awaiter(this, void 0, void 0, function () {
                var userToUpdate, error_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, User_1.default.findOne({
                                    where: { id_user: Number(id) }
                                })];
                        case 1:
                            userToUpdate = _a.sent();
                            if (!userToUpdate) return [3 /*break*/, 3];
                            return [4 /*yield*/, User_1.default.update(updateUser, { where: { id_user: Number(id) } })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, updateUser];
                        case 3: return [2 /*return*/, null];
                        case 4:
                            error_3 = _a.sent();
                            throw error_3;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UserService.deleteUserById = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var userToDelete, deletedUser, error_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, User_1.default.findOne({ where: { id_user: Number(id) } })];
                        case 1:
                            userToDelete = _a.sent();
                            if (!userToDelete) return [3 /*break*/, 3];
                            return [4 /*yield*/, User_1.default.destroy({
                                    where: { id_user: Number(id) }
                                })];
                        case 2:
                            deletedUser = _a.sent();
                            return [2 /*return*/, deletedUser];
                        case 3: return [2 /*return*/, null];
                        case 4:
                            error_4 = _a.sent();
                            throw error_4;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        UserService.getUserByEmail = function (email) {
            return __awaiter(this, void 0, void 0, function () {
                var returnedUser, error_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, User_1.default.findOne({
                                    where: { user_email: email }
                                })];
                        case 1:
                            returnedUser = _a.sent();
                            return [2 /*return*/, returnedUser];
                        case 2:
                            error_5 = _a.sent();
                            throw error_5;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return UserService;
    }());
    exports.default = UserService;
});
define("src/Util/Util", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Util = /** @class */ (function () {
        function Util() {
            this.statusCode = null;
            this.type = null;
            this.data = null;
            this.message = null;
        }
        Util.prototype.setSuccess = function (statusCode, message, data) {
            this.statusCode = statusCode;
            this.message = message;
            this.data = data;
            this.type = 'success';
        };
        Util.prototype.setError = function (statusCode, message) {
            this.statusCode = statusCode;
            this.message = message;
            this.type = 'error';
        };
        Util.prototype.send = function (res) {
            var result = {
                status: this.type,
                message: this.message,
                data: this.data,
            };
            if (this.type === 'success') {
                return res.status(this.statusCode).json(result);
            }
            return res.status(this.statusCode).json({
                status: this.type,
                message: this.message,
            });
        };
        return Util;
    }());
    exports.default = Util;
});
define("src/controllers/UserController", ["require", "exports", "src/services/UserServices", "src/Util/Util"], function (require, exports, UserServices_1, Util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    UserServices_1 = __importDefault(UserServices_1);
    Util_1 = __importDefault(Util_1);
    var util = new Util_1.default();
    var UserController = /** @class */ (function () {
        function UserController() {
        }
        UserController.getAllUsers = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var allUsers, error_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, UserServices_1.default.getAllUsers()];
                        case 1:
                            allUsers = _a.sent();
                            if (allUsers.length > 0) {
                                util.setSuccess(200, 'Users returned', allUsers);
                            }
                            else {
                                util.setSuccess(204, 'No users found');
                            }
                            return [2 /*return*/, util.send(res)];
                        case 2:
                            error_6 = _a.sent();
                            util.setError(400, error_6);
                            return [2 /*return*/, util.send(res)];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        UserController.addUser = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var newUser, createdUser, error_7;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            newUser = req.body;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, UserServices_1.default.addUser(newUser)];
                        case 2:
                            createdUser = _a.sent();
                            util.setSuccess(201, "new User created!", createdUser);
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_7 = _a.sent();
                            util.setError(400, error_7);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        UserController.updateUserById = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var id, updateUser, updateUser_1, error_8;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = req.params.id.id;
                            updateUser = req.body;
                            if (!Number.isInteger(Number(id))) {
                                util.setError(400, 'Please input a valid numeric value');
                                return [2 /*return*/, util.send(res)];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, UserServices_1.default.updateUserById(id, updateUser_1)];
                        case 2:
                            updateUser_1 = _a.sent();
                            if (updateUser_1) {
                                util.setSuccess(201, "User " + id + " updated!", updateUser_1);
                            }
                            else {
                                util.setSuccess(204, "Could not update user " + id + "!");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_8 = _a.sent();
                            util.setError(400, error_8);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        UserController.deleteUserById = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var id, userToDelete, error_9;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = req.params.id.id;
                            if (!Number.isInteger(Number(id))) {
                                util.setError(400, 'Please input a valid numeric value');
                                return [2 /*return*/, util.send(res)];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, UserServices_1.default.deleteUserById(id)];
                        case 2:
                            userToDelete = _a.sent();
                            if (userToDelete) {
                                util.setSuccess(200, "Deleted user " + id + "!", userToDelete);
                            }
                            else {
                                util.setSuccess(204, "The user you are looking for can not be found");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_9 = _a.sent();
                            util.setError(400, error_9);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        UserController.getUserByEmail = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var requiredUser, returnedUser, error_10;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requiredUser = req.params.email;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, UserServices_1.default.getUserByEmail(requiredUser)];
                        case 2:
                            returnedUser = _a.sent();
                            if (returnedUser) {
                                util.setSuccess(200, "User " + requiredUser + " returned!", returnedUser);
                            }
                            else {
                                util.setSuccess(204, "Could not found user " + requiredUser + "!");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_10 = _a.sent();
                            util.setError(400, error_10);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return UserController;
    }());
    exports.default = UserController;
});
define("src/routes/UserRoutes", ["require", "exports", "express", "src/controllers/UserController"], function (require, exports, express_1, UserController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    UserController_1 = __importDefault(UserController_1);
    var router = (0, express_1.Router)();
    router.get('/', UserController_1.default.getAllUsers);
    router.post('/', UserController_1.default.addUser);
    router.put('/id=:id', UserController_1.default.updateUserById);
    router.delete('/id=:id', UserController_1.default.deleteUserById);
    router.get('/email=:email', UserController_1.default.getUserByEmail);
    exports.default = router;
});
define("src/services/SearchHistoryServices", ["require", "exports", "../../models/Searchhistory"], function (require, exports, Searchhistory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    Searchhistory_1 = __importDefault(Searchhistory_1);
    var SearchHistoryService = /** @class */ (function () {
        function SearchHistoryService() {
        }
        SearchHistoryService.getAllSearchHistory = function () {
            return __awaiter(this, void 0, void 0, function () {
                var error_11;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, Searchhistory_1.default.findAll()];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            error_11 = _a.sent();
                            throw error_11;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryService.addSearchHistory = function (newSearchHistory) {
            return __awaiter(this, void 0, void 0, function () {
                var error_12;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, Searchhistory_1.default.create(newSearchHistory)];
                        case 1: return [2 /*return*/, _a.sent()];
                        case 2:
                            error_12 = _a.sent();
                            throw error_12;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryService.updateSearchHistoryById = function (id, searchHistoryToUpdate) {
            return __awaiter(this, void 0, void 0, function () {
                var searchHistoryToUpdate_1, error_13;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, Searchhistory_1.default.findOne({
                                    where: { id_searchHistory: Number(id) }
                                })];
                        case 1:
                            searchHistoryToUpdate_1 = _a.sent();
                            if (!searchHistoryToUpdate_1) return [3 /*break*/, 3];
                            return [4 /*yield*/, Searchhistory_1.default.update(searchHistoryToUpdate_1, { where: { id_searchHistory: Number(id) } })];
                        case 2:
                            _a.sent();
                            return [2 /*return*/, searchHistoryToUpdate_1];
                        case 3: return [2 /*return*/, null];
                        case 4:
                            error_13 = _a.sent();
                            throw error_13;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryService.deleteSearchHistoryById = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var searchHistoryToDelete, deletedSearchHistory, error_14;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 4, , 5]);
                            return [4 /*yield*/, Searchhistory_1.default.findOne({ where: { id_searchHistory: Number(id) } })];
                        case 1:
                            searchHistoryToDelete = _a.sent();
                            if (!searchHistoryToDelete) return [3 /*break*/, 3];
                            return [4 /*yield*/, Searchhistory_1.default.destroy({
                                    where: { id_searchHistory: Number(id) }
                                })];
                        case 2:
                            deletedSearchHistory = _a.sent();
                            return [2 /*return*/, deletedSearchHistory];
                        case 3: return [2 /*return*/, null];
                        case 4:
                            error_14 = _a.sent();
                            throw error_14;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryService.getSearchHistoryById = function (id) {
            return __awaiter(this, void 0, void 0, function () {
                var returnedSearchHistory, error_15;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, Searchhistory_1.default.findOne({
                                    where: { id_searchHistory: Number(id) }
                                })];
                        case 1:
                            returnedSearchHistory = _a.sent();
                            return [2 /*return*/, returnedSearchHistory];
                        case 2:
                            error_15 = _a.sent();
                            throw error_15;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        return SearchHistoryService;
    }());
    exports.default = SearchHistoryService;
});
define("src/controllers/SearchHistoryController", ["require", "exports", "src/services/SearchHistoryServices", "src/Util/Util"], function (require, exports, SearchHistoryServices_1, Util_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    SearchHistoryServices_1 = __importDefault(SearchHistoryServices_1);
    Util_2 = __importDefault(Util_2);
    var util = new Util_2.default();
    var SearchHistoryController = /** @class */ (function () {
        function SearchHistoryController() {
        }
        SearchHistoryController.getAllSearchHistory = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var allSearchHistories, error_16;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, SearchHistoryServices_1.default.getAllSearchHistory()];
                        case 1:
                            allSearchHistories = _a.sent();
                            if (allSearchHistories.length > 0) {
                                util.setSuccess(200, 'Search history returned', allSearchHistories);
                            }
                            else {
                                util.setSuccess(204, 'No Search history found');
                            }
                            return [2 /*return*/, util.send(res)];
                        case 2:
                            error_16 = _a.sent();
                            util.setError(400, error_16);
                            return [2 /*return*/, util.send(res)];
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryController.addSearchHistory = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var SearchHistory, createdSearchHistory, error_17;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            SearchHistory = req.body;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, SearchHistoryServices_1.default.addSearchHistory(SearchHistory)];
                        case 2:
                            createdSearchHistory = _a.sent();
                            util.setSuccess(201, "new Search history created!", createdSearchHistory);
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_17 = _a.sent();
                            util.setError(400, error_17);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryController.updateSearchHistoryById = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var id, updateSearchHistory, updatesSearchHistory, error_18;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = req.params.id.id;
                            updateSearchHistory = req.body;
                            if (!Number.isInteger(Number(id))) {
                                util.setError(400, 'Please input a valid numeric value');
                                return [2 /*return*/, util.send(res)];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, SearchHistoryServices_1.default.updateUserById(id, updateSearchHistory)];
                        case 2:
                            updatesSearchHistory = _a.sent();
                            if (updatesSearchHistory) {
                                util.setSuccess(201, "Search history " + id + " updated!", updatesSearchHistory);
                            }
                            else {
                                util.setSuccess(204, "Could not update Search history " + id + "!");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_18 = _a.sent();
                            util.setError(400, error_18);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryController.deleteSearchHistoryById = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var id, searchHistoryToDelete, error_19;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            id = req.params.id.id;
                            if (!Number.isInteger(Number(id))) {
                                util.setError(400, 'Please input a valid numeric value');
                                return [2 /*return*/, util.send(res)];
                            }
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, SearchHistoryServices_1.default.deleteUserById(id)];
                        case 2:
                            searchHistoryToDelete = _a.sent();
                            if (searchHistoryToDelete) {
                                util.setSuccess(200, "Deleted Search history " + id + "!", searchHistoryToDelete);
                            }
                            else {
                                util.setSuccess(204, "The Search history you are looking for can not be found");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_19 = _a.sent();
                            util.setError(400, error_19);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        SearchHistoryController.getSearchHistoryById = function (req, res) {
            return __awaiter(this, void 0, void 0, function () {
                var requiredSearchHistory, returnedSearchHistory, error_20;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            requiredSearchHistory = req.params.id;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, SearchHistoryServices_1.default.getUserByEmail(requiredSearchHistory)];
                        case 2:
                            returnedSearchHistory = _a.sent();
                            if (returnedSearchHistory) {
                                util.setSuccess(200, "Search history " + requiredSearchHistory + " returned!", returnedSearchHistory);
                            }
                            else {
                                util.setSuccess(204, "Could not found Search history " + requiredSearchHistory + "!");
                            }
                            return [2 /*return*/, util.send(res)];
                        case 3:
                            error_20 = _a.sent();
                            util.setError(400, error_20);
                            return [2 /*return*/, util.send(res)];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        return SearchHistoryController;
    }());
    exports.default = SearchHistoryController;
});
define("src/routes/SearchHistoryRoutes", ["require", "exports", "express", "src/controllers/SearchHistoryController"], function (require, exports, express_2, SearchHistoryController_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    SearchHistoryController_1 = __importDefault(SearchHistoryController_1);
    var router = (0, express_2.Router)();
    router.get('/', SearchHistoryController_1.default.getAllSearchHistory);
    router.post('/', SearchHistoryController_1.default.addSearchHistory);
    router.put('/id=:id', SearchHistoryController_1.default.updateSearchHistoryById);
    router.delete('/id=:id', SearchHistoryController_1.default.deleteSearchHistoryById);
    router.get('/id=:id', SearchHistoryController_1.default.getSearchHistoryById);
    exports.default = router;
});
define("src/index", ["require", "exports", "express", "body-parser", "node-url-shortener", "cors", "src/routes/UserRoutes", "src/routes/SearchHistoryRoutes"], function (require, exports, express_3, body_parser_1, node_url_shortener_1, cors_1, UserRoutes_1, SearchHistoryRoutes_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    express_3 = __importDefault(express_3);
    body_parser_1 = __importDefault(body_parser_1);
    node_url_shortener_1 = __importDefault(node_url_shortener_1);
    cors_1 = __importDefault(cors_1);
    UserRoutes_1 = __importDefault(UserRoutes_1);
    SearchHistoryRoutes_1 = __importDefault(SearchHistoryRoutes_1);
    var sequelize = require('../db/database');
    var app = (0, express_3.default)();
    var port = process.env.PORT || 3000;
    if (!process.env.DATABASE_URL) {
        port = 3000;
    }
    app.use(body_parser_1.default.urlencoded({ extended: true }));
    app.use(express_3.default.urlencoded({ extended: true }));
    app.use(body_parser_1.default.json());
    app.use((0, cors_1.default)());
    app.get('/', function (req, res) {
        res.end('¡Welcome!');
    });
    app.post('/url', function (req, res) {
        var url = req.body.url;
        node_url_shortener_1.default.short(url, function (err, shortUrl) {
            res.send(shortUrl);
        });
    });
    app.use('/api/user', UserRoutes_1.default);
    app.use('/api/searchHistory', SearchHistoryRoutes_1.default);
    sequelize.sync({ force: false, logging: console.log }).then(function () {
        console.log("¡We connect to the database!");
        app.listen(port, function () {
            console.log('¡Server up in port ' + port + '!');
        });
    }).catch(function (error) {
        console.log(error);
    });
});
